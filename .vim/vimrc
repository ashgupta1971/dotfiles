" .vimrc
" Author: Ashish Gupta
" Date: Apr 7 2017 Initial implementation.
"       Dec 20 2017 More changes as suggested by Fuzicast.
"       Oct 15 2021 Added vim-plug plugins plus some more configuration.

"
" The following section is from someone else's vim config
"

" To use fancy symbols wherever possible, change this setting from 0 to 1
" and use a font from https://github.com/ryanoasis/nerd-fonts in your terminal 
" (if you aren't using one of those fonts, you will see funny characters here. 
" Turst me, they look nice when using one of those fonts).
let fancy_symbols_enabled = 0


set encoding=utf-8
let using_neovim = 0
let using_vim = !using_neovim

" ============================================================================
" Vim-plug initialization
" Avoid modifying this section, unless you are very sure of what you are doing

let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')

if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

" Obscure hacks done, you can now modify the rest of the config down below 
" as you wish :)
" IMPORTANT: some things in the config are vim or neovim specific. It's easy 
" to spot, they are inside `if using_vim` or `if using_neovim` blocks.

" ============================================================================
" Active plugins
" You can disable or add new ones here:

" this needs to be here, so vim-plug knows we are declaring the plugins we
" want to use
call plug#begin("~/.vim/plugged")

        " Now the actual plugins:

        " Override configs by directory
        "Plug 'arielrossanigo/dir-configs-override.vim'
        " Code commenter
        Plug 'scrooloose/nerdcommenter'
        " Better file browser
        Plug 'scrooloose/nerdtree'
        " Class/module browser
        Plug 'majutsushi/tagbar'
        " Search results counter
        "Plug 'vim-scripts/IndexedSearch'
        " A couple of nice colorschemes
        " Plug 'fisadev/fisa-vim-colorscheme'
        Plug 'patstockwell/vim-monokai-tasty'
        " Airline
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        " Code and files fuzzy finder
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'
        " Pending tasks list
        Plug 'fisadev/FixedTaskList.vim'
        " Async autocompletion
        "if using_neovim && vim_plug_just_installed
        "    Plug 'Shougo/deoplete.nvim', {'do': ':autocmd VimEnter * UpdateRemotePlugins'}
        "else
        "    Plug 'Shougo/deoplete.nvim'
        "endif
        "Plug 'roxma/nvim-yarp'
        "Plug 'roxma/vim-hug-neovim-rpc'
        " Python autocompletion
        "Plug 'deoplete-plugins/deoplete-jedi'
        " Completion from other opened files
        "Plug 'Shougo/context_filetype.vim'
        " Just to add the python go-to-definition and similar features, autocompletion
        " from this plugin is disabled
        "Plug 'davidhalter/jedi-vim'
        " Automatically close parenthesis, etc
        Plug 'Townk/vim-autoclose'
        " Surround
        Plug 'tpope/vim-surround'
        " Indent text object
        Plug 'michaeljsmith/vim-indent-object'
        " Indentation based movements
        Plug 'jeetsukumaran/vim-indentwise'
        " Better language packs
        Plug 'sheerun/vim-polyglot'
        " Ack code search (requires ack installed in the system)
        Plug 'mileszs/ack.vim'
        " Paint css colors with the real color
        Plug 'lilydjwg/colorizer'
        " Window chooser
        Plug 't9md/vim-choosewin'
        " Automatically sort python imports
        Plug 'fisadev/vim-isort'
        " Highlight matching html tags
        Plug 'valloric/MatchTagAlways'
        " Generate html in a simple way
        Plug 'mattn/emmet-vim'
        " Git integration
        Plug 'tpope/vim-fugitive'
        " Git/mercurial/others diff icons on the side of the file lines
        Plug 'mhinz/vim-signify'
        " Yank history navigation
        Plug 'vim-scripts/YankRing.vim'
        " Linters
        Plug 'neomake/neomake'
        " Relative numbering of lines (0 is the current line)
        " (disabled by default because is very intrusive and can't be easily toggled
        " on/off. When the plugin is present, will always activate the relative
        " numbering every time you go to normal mode. Author refuses to add a setting
        " to avoid that)
        "Plug 'myusuf3/numbers.vim'
        " Nice icons in the file explorer and file type status line.
        Plug 'ryanoasis/vim-devicons'

        if using_vim
            " Consoles as buffers (neovim has its own consoles as buffers)
            Plug 'rosenfeld/conque-term'
            " XML/HTML tags navigation (neovim has its own)
            Plug 'vim-scripts/matchit.zip'
        endif

        " Code searcher. If you enable it, you should also configure g:hound_base_url 
        " and g:hound_port, pointing to your hound instance
        " Plug 'mattn/webapi-vim'
        " Plug 'jfo/hound.vim'









	" Now my plugins
	" A nice white color scheme
	Plug 'habamax/vim-sugarlily'
	" A nice dark color scheme
	Plug 'josegamez82/starrynight'	
	" A whole collection of color schemes
	Plug 'flazz/vim-colorschemes'
	" Code completion
	"Plug 'neoclide/coc.nvim', { 'dir' : '~/.vim/pack/coc.nvim' }
	Plug 'neoclide/coc.nvim', { 'branch' : 'release' }
    " The next 4 plugins are for live previews of markdown documents
    Plug 'godlygeek/tabular'
    Plug 'plasticboy/vim-markdown'
    Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
    Plug 'sindresorhus/github-markdown-css'
    " The next 2 plugins are for distraction free writing of text documents
    Plug 'junegunn/limelight.vim'
    Plug 'junegunn/goyo.vim'
    " Another color scheme
    Plug 'adigitoleo/vim-mellow', { 'tag': '*' }
    " A status line color scheme
    "Plug 'adigitoleo/vim-mellow-statusline', { 'tag': '*' }


" Tell vim-plug we finished declaring plugins, so it can load them
call plug#end()

" ============================================================================
" Install plugins the first time vim runs

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif

" better backup, swap and undos storage for vim (nvim has nice ones by
" default)
set directory=~/.vim/dirs/tmp     " directory to place swap files in
set backup                        " make backup files
set backupdir=~/.vim/dirs/backups " where to put backup files
set undofile                      " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos
set viminfo+=n~/.vim/dirs/viminfo
" create needed directories if they don't exist
if !isdirectory(&backupdir)
        call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
        call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
        call mkdir(&undodir, "p")
endif
    
   
" remove ugly vertical lines on window division
set fillchars+=vert:\ 
  
" use 256 colors when possible
if has('gui_running') || (&term =~? 'mlterm\|xterm\|xterm-256\|screen-256')
    if !has('gui_running')
        let &t_Co = 256
    endif
    colorscheme vim-monokai-tasty
else
    colorscheme delek
endif



" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
"set wildmode=list:longest

" save as sudo
ca w!! w !sudo tee "%"


" Ability to add python breakpoints
" (I use ipdb, but you can change it to whatever tool you use for debugging)
au FileType python map <silent> <leader>b Oimport ipdb; ipdb.set_trace()<esc>



" ============================================================================
" Plugins settings and mappings
" Edit them as you wish.

" Tagbar -----------------------------

" toggle tagbar display
map <F4> :TagbarToggle<CR>
" autofocus on tagbar open
let g:tagbar_autofocus = 1

" NERDTree -----------------------------

" toggle nerdtree display
map <F7> :NERDTreeToggle<CR>
" open nerdtree with the current file selected
nmap ,t :NERDTreeFind<CR>
" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

" Enable folder icons
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" Fix directory colors
highlight! link NERDTreeFlags NERDTreeDir

" Remove expandable arrow
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
let NERDTreeDirArrowExpandable = "\u00a0"
let NERDTreeDirArrowCollapsible = "\u00a0"
let NERDTreeNodeDelimiter = "\x07"

" Autorefresh on tree focus
function! NERDTreeRefresh()
    if &filetype == "nerdtree"
        silent exe substitute(mapcheck("R"), "<CR>", "", "")
    endif
endfunction

autocmd BufEnter * call NERDTreeRefresh()

" Tasklist ------------------------------

" show pending tasks list
map <F8> :TaskList<CR>

" Neomake ------------------------------

" Run linter on write
autocmd! BufWritePost * Neomake

" Check code as python3 by default
let g:neomake_python_python_maker = neomake#makers#ft#python#python()
let g:neomake_python_flake8_maker = neomake#makers#ft#python#flake8()
let g:neomake_python_python_maker.exe = 'python3 -m py_compile'
let g:neomake_python_flake8_maker.exe = 'python3 -m flake8'

" Disable error messages inside the buffer, next to the problematic line
let g:neomake_virtualtext_current_error = 0

" Fzf ------------------------------

" file finder mapping
nmap ,e :Files<CR>
" tags (symbols) in current file finder mapping
nmap ,g :BTag<CR>
" the same, but with the word under the cursor pre filled
nmap ,wg :execute ":BTag " . expand('<cword>')<CR>
" tags (symbols) in all files finder mapping
nmap ,G :Tags<CR>
" the same, but with the word under the cursor pre filled
nmap ,wG :execute ":Tags " . expand('<cword>')<CR>
" general code finder in current file mapping
nmap ,f :BLines<CR>
" the same, but with the word under the cursor pre filled
nmap ,wf :execute ":BLines " . expand('<cword>')<CR>
" general code finder in all files mapping
nmap ,F :Lines<CR>
" the same, but with the word under the cursor pre filled
nmap ,wF :execute ":Lines " . expand('<cword>')<CR>
" commands finder mapping
nmap ,c :Commands<CR>







" Airline ------------------------------

let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
"let g:airline_powerline_fonts = 0
let g:airline_theme = 'bubblegum'
"let g:airline#extensions#whitespace#enabled = 0

" Fancy Symbols!!

        "if fancy_symbols_enabled
        "    let g:webdevicons_enable = 1
"
"            " custom airline symbols
"            if !exists('g:airline_symbols')
"               let g:airline_symbols = {}
"            endif
"            let g:airline_left_sep = ''
"            let g:airline_left_alt_sep = ''
"            let g:airline_right_sep = ''
"            let g:airline_right_alt_sep = ''
"            let g:airline_symbols.branch = '⭠'
"            let g:airline_symbols.readonly = '⭤'
"            let g:airline_symbols.linenr = '⭡'
"        else
    let g:webdevicons_enable = 0
"endif

" Custom configurations ----------------

" Include user's custom nvim configurations
let custom_configs_path = "~/.vim/custom.vim"
if filereadable(expand(custom_configs_path))
  execute "source " . custom_configs_path
endif





















" Now my stuff
"==============================================================================
"
" Enable plugins
"
filetype plugin on

"
" Enable blowfish2 encryption
"
set cm=blowfish2

"
" Abbreviations
"
:ab sig YOUR NAME GOES HERE
:ab mus MUST TRY!!!

"
" Key bindings
"
:map <F2> :tabnew<CR>
:map <F3> gt
:map <F4> :tabclose<CR>
:map <F5> :qa<CR>

"
" Quicly save the current file
"
nnoremap <leader>s :w<CR> 
inoremap <leader>s <C-c>:w<CR>

" Open file whose name is currently under cursor in a new tab
:map <F6> <C-W>gf<CR> 

" Open file browser
":map <F7> :tabnew<CR>:Explore<CR>
" the following doesn't work
"map <F7> <C-w>v:vertical resize 60<CR>:Explore<CR>
"map <F8> <C=w>q

" Dummy map
":map <F8> <h1><Esc>ea</h1><Esc>a

let mapleader=","       " leader is comma
" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp ~/.vim/vimrc<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source ~/.vimrc<CR>
" save session
nnoremap <leader>s :mksession<CR>

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

"
" Display file name in title bar
"
"set title

"
" Allow mouse to move cursor
"
set mouse=a

"
" Allow tab completion of commands
"
set wildmenu

"
" Better handling of tabs when pasting
" (disabled to allow abbreviations)
"set paste

"
" Line numbering
"
set number
set relativenumber

"
" Don't hit edge of screen when scrolling
"
set scrolloff=5

"
" Colors and syntax highlighting
"
"color ron
colorscheme starrynight
syntax enable

"
" Tabs and spaces
"
set tabstop=4	" number of visual spaces per tab
set softtabstop=4	" number of spaces in tab when editing
set expandtab	" tabs are spaces

"
" Misc settings 
"
set showcmd     " show command in bottom bar
"set cursorline          " highlight current line
filetype indent on      " load filetype-specific indent files
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to
set showmatch           " highlight matching [{()}]
" set colorcolumn=80    " highlight column 80

"
" Searching
"
set ignorecase
" set smartcase
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

"
" Folding (hiding blocks of text)
"
"set foldenable          " enable folding
"set foldlevelstart=0   " open most folds by default, 0=all block hidden, 99=all blocks open
"set foldnestmax=10      " 10 nested fold max
" space open/closes folds
"nnoremap <space> za
"set foldmethod=indent   " fold based on indent level

"
" The following mapping will allow you to save a read-only file
"
"cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

"
" Search entire subtree for word under the cursor
"
map <leader>* :grep -R <cword> * --exclude-dir={.git,tmp,log}<CR><CR>


"
" Move a line or block of lines up or down
"
nnoremap <c-j> :m .+1<CR>==
nnoremap <c-k> :m .-2<CR>==
inoremap <c-j> <Esc>:m .+1<CR>==gi
inoremap <c-k> <Esc>:m .-2<CR>==gi
vnoremap <c-j> :m '>+1<CR>gv=gv
vnoremap <c-k> :m '<-2<CR>gv=gv

"
" Save session, modified files and exit
"
command! Xs :mks! | :xa "save the session, save modified files, and exit

"
"
"
"let g:deoplete#enable_at_startup = 1
let g:coc_node_path="/usr/bin/node"

" Markdown preview settings
"let g:mkdp_browser='/usr/bin/google-chrome-stable'
"let g:mkdp_browser='/usr/bin/firefox'
let g:mkdp_browser='/usr/bin/xdg-open'
let g:mkdp_filetypes=['markdown']
let g:mkdp_markdown_css='/home/ashish/Documents/Temp/github-markdown-light.css'
let g:mkdp_auto_start=1 

let g:mkdp_echo_preview_url = 1
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0
    \ }

" .............................................................................
" junegunn/limelight.vim
" .............................................................................

let g:limelight_conceal_ctermfg=244

" .............................................................................
" iamcco/markdown-preview.nvim
" .............................................................................

let g:mkdp_auto_close=0
let g:mkdp_refresh_slow=1

autocmd FileType markdown let b:sleuth_automatic=0
autocmd FileType markdown set conceallevel=0
autocmd FileType markdown normal zR

